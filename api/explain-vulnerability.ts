import type { VercelRequest, VercelResponse } from '@vercel/node';
import { GoogleGenerativeAI } from '@google/generative-ai';

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || '';
const genAI = GEMINI_API_KEY ? new GoogleGenerativeAI(GEMINI_API_KEY) : null;

interface VulnerabilityTypeExplanation {
  term: string;
  category: string;
  shortDefinition: string;
  technicalExplanation: string;
  commonCauses: string[];
  prevention: string[];
  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
  exampleAttack: string;
  relatedTerms: string[];
  learnMoreUrl: string;
}

/**
 * Generate educational explanation for vulnerability TYPES (not specific CVEs)
 * This creates a glossary/word bank of security terms
 */
export default async function handler(req: VercelRequest, res: VercelResponse) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });


  try {
    // Robust body parsing
    const rawBody = (req as any).body;
    const body = typeof rawBody === 'string' ? JSON.parse(rawBody || '{}') : (rawBody || {});
    const { term } = body;

    if (!term) return res.status(400).json({ error: 'Missing required field: term' });

    // Config guards (use 503 for service unavailable)
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
    if (!GEMINI_API_KEY) {
      return res.status(503).json({ error: 'AI service not configured' });
    }

    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

    // Use Gemini to generate educational explanation for the vulnerability type
    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-lite' });

    const prompt = `You are a cybersecurity educator creating a glossary entry for a vulnerability type.

Create a concise, educational explanation for this security term: "${term}"

Generate a JSON response with the following structure:
{
  "term": "${term}",
  "category": "The broad category (e.g., 'Injection Attack', 'Authentication', 'Cryptography', 'Access Control')",
  "shortDefinition": "A 1-2 sentence definition that anyone can understand",
  "technicalExplanation": "A clear 2-3 sentence technical explanation",
  "commonCauses": ["cause1", "cause2", "cause3"],
  "prevention": ["prevention1", "prevention2", "prevention3"],
  "severity": "CRITICAL|HIGH|MEDIUM|LOW",
  "exampleAttack": "A brief example of how this could be exploited (2-3 sentences)",
  "relatedTerms": ["term1", "term2", "term3"],
  "learnMoreUrl": "A real URL to OWASP, NIST, CWE, or other reputable source"
}

IMPORTANT: 
- Keep shortDefinition simple enough for non-technical users
- Make technical explanation clear but accurate
- Provide actionable prevention steps
- Use real, working URLs (OWASP Top 10, CWE database, NIST, etc.)
- Keep it concise - this is a glossary entry, not a full article

Return ONLY valid JSON, no additional text.`;

    const result = await model.generateContent(prompt);
    const responseText = result.response.text();
    
    // Clean up response (remove markdown code blocks if present)
    const cleanedResponse = responseText
      .replace(/```json\n?/g, '')
      .replace(/```\n?/g, '')
      .trim();

    let explanation: VulnerabilityTypeExplanation;
    
    try {
      explanation = JSON.parse(cleanedResponse);
    } catch {
      console.error('Failed to parse AI response:', cleanedResponse);
      return res.status(500).json({ 
        error: 'Failed to generate explanation',
        details: 'AI response was not valid JSON'
      });
    }

    return res.status(200).json({
      success: true,
      term,
      explanation
    });

  } catch (error) {
    console.error('Error explaining vulnerability type:', error);
    return res.status(500).json({ 
      error: 'Failed to generate explanation',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
