import { Vulnerability, Application } from '../types';
import { AlertTriangle, ExternalLink, CheckCircle, Clock } from 'lucide-react';

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
  applications: Application[];
  onUpdateStatus?: (id: string, status: Vulnerability['status']) => void; // ← add this
}

export const VulnerabilityList: React.FC<VulnerabilityListProps> = ({
  vulnerabilities,
  applications,
  onUpdateStatus, // ← receive it (optional)
}) => {
  // Filter vulnerabilities to only show those affecting user's applications
  const userAppIds = new Set(applications.map(app => app.id));
  const filteredVulnerabilities = vulnerabilities.filter(vuln =>
    vuln.affectedApps.some(appId => userAppIds.has(appId))
  );

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL': return 'bg-red-100 text-red-800 border-red-300';
      case 'HIGH':     return 'bg-orange-100 text-orange-800 border-orange-300';
      case 'MEDIUM':   return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'LOW':      return 'bg-blue-100 text-blue-800 border-blue-300';
      default:         return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'mitigated':   return <CheckCircle size={16} className="text-green-600" />;
      case 'acknowledged':return <Clock size={16} className="text-yellow-600" />;
      default:            return <AlertTriangle size={16} className="text-red-600" />;
    }
  };

  const getAppName = (appId: string) => applications.find(a => a.id === appId)?.name || 'Unknown App';

  const formatDate = (dateString: string) =>
    new Date(dateString).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-2xl font-bold text-gray-800 mb-6">Vulnerabilities</h2>

      {filteredVulnerabilities.length === 0 ? (
        <div className="text-center py-12">
          <AlertTriangle size={48} className="mx-auto text-gray-400 mb-4" />
          <p className="text-gray-500 text-lg">No vulnerabilities detected</p>
          <p className="text-gray-400 text-sm mt-2">Your applications are currently safe</p>
        </div>
      ) : (
        <div className="space-y-4">
          {filteredVulnerabilities.map((vuln) => {
            const firstRef = vuln.references?.[0]; // ← safe access
            return (
              <div key={vuln.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                <div className="flex justify-between items-start mb-3">
                  <div className="flex items-center gap-3">
                    {getStatusIcon(vuln.status)}
                    <div>
                      <h3 className="font-semibold text-lg text-gray-900">{vuln.cveId}</h3>
                      <p className="text-sm text-gray-500">Published: {formatDate(vuln.publishedDate)}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className={`px-3 py-1 rounded-full text-sm font-semibold border ${getSeverityColor(vuln.severity)}`}>
                      {vuln.severity}
                    </span>
                    {typeof vuln.cvssScore === 'number' && (
                      <span className="px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm font-semibold">
                        CVSS: {vuln.cvssScore.toFixed(1)}
                      </span>
                    )}
                  </div>
                </div>

                <p className="text-gray-600 mb-4">{vuln.description}</p>

                <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                  <div className="flex items-center gap-2 flex-wrap">
                    <span className="text-sm font-medium text-gray-600">Affected Apps:</span>
                    {vuln.affectedApps.map(appId => (
                      <span key={appId} className="px-2 py-1 bg-gray-200 text-gray-700 rounded text-xs">
                        {getAppName(appId)}
                      </span>
                    ))}
                  </div>

                  <div className="flex items-center gap-3">
                    {firstRef && (
                      <a
                        href={firstRef}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-1.5 text-sm text-indigo-600 hover:text-indigo-800"
                      >
                        Details <ExternalLink size={14} />
                      </a>
                    )}

                    {onUpdateStatus && (
                      <div className="flex items-center gap-1">
                        <button
                          className="text-xs px-2 py-1 rounded border hover:bg-gray-50"
                          onClick={() => onUpdateStatus(vuln.id, 'acknowledged')}
                          title="Mark as acknowledged"
                        >
                          Acknowledge
                        </button>
                        <button
                          className="text-xs px-2 py-1 rounded border hover:bg-gray-50"
                          onClick={() => onUpdateStatus(vuln.id, 'mitigated')}
                          title="Mark as mitigated"
                        >
                          Mitigate
                        </button>
                        <button
                          className="text-xs px-2 py-1 rounded border hover:bg-gray-50"
                          onClick={() => onUpdateStatus(vuln.id, 'active')}
                          title="Mark as active"
                        >
                          Active
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};
