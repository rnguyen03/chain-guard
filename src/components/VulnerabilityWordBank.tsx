import { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { BookOpen, X, Shield, AlertTriangle, Loader2, ExternalLink } from 'lucide-react';

interface VulnerabilityTypeExplanation {
  term: string;
  category: string;
  shortDefinition: string;
  technicalExplanation: string;
  commonCauses: string[];
  prevention: string[];
  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
  exampleAttack: string;
  relatedTerms: string[];
  learnMoreUrl: string;
}

interface VulnerabilityWordBankProps {
  vulnerabilities: Array<{ description: string; cveId: string }>;
}

// Common vulnerability types to look for in descriptions
const COMMON_VULN_TYPES = [
  'SQL Injection',
  'Cross-Site Scripting',
  'XSS',
  'Buffer Overflow',
  'Remote Code Execution',
  'RCE',
  'Authentication Bypass',
  'Path Traversal',
  'CSRF',
  'Cross-Site Request Forgery',
  'Denial of Service',
  'DoS',
  'Privilege Escalation',
  'Directory Traversal',
  'Command Injection',
  'XML External Entity',
  'XXE',
  'Server-Side Request Forgery',
  'SSRF',
  'Insecure Deserialization',
  'Security Misconfiguration',
  'Broken Authentication',
  'Sensitive Data Exposure',
  'Memory Corruption',
  'Use After Free',
  'Integer Overflow',
  'Race Condition',
  'Clickjacking',
  'Session Fixation',
  'Cryptographic Failure',
  'Information Disclosure'
];

export const VulnerabilityWordBank: React.FC<VulnerabilityWordBankProps> = ({ vulnerabilities }) => {
  const [wordBank, setWordBank] = useState<string[]>([]);
  const [selectedTerm, setSelectedTerm] = useState<string | null>(null);
  const [explanation, setExplanation] = useState<VulnerabilityTypeExplanation | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // Extract vulnerability types from descriptions
    const types = new Set<string>();
    
    vulnerabilities.forEach(vuln => {
      const text = vuln.description.toLowerCase();
      
      COMMON_VULN_TYPES.forEach(type => {
        if (text.includes(type.toLowerCase())) {
          types.add(type);
        }
      });
    });

    setWordBank(Array.from(types).sort());
  }, [vulnerabilities]);

  const fetchExplanation = async (term: string) => {
    setSelectedTerm(term);
    setLoading(true);
    
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch('/api/explain-vulnerability', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ term }),
      });

      if (response.ok) {
        const data = await response.json();
        setExplanation(data.explanation);
      } else {
        console.error('Failed to fetch explanation');
        alert('Failed to load explanation. Please try again.');
        setSelectedTerm(null);
      }
    } catch (error) {
      console.error('Error fetching explanation:', error);
      alert('Failed to load explanation. Please try again.');
      setSelectedTerm(null);
    } finally {
      setLoading(false);
    }
  };

  const closeModal = () => {
    setSelectedTerm(null);
    setExplanation(null);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL': return 'bg-red-500/20 text-red-300 border-red-500/30';
      case 'HIGH': return 'bg-orange-500/20 text-orange-300 border-orange-500/30';
      case 'MEDIUM': return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30';
      case 'LOW': return 'bg-blue-500/20 text-blue-300 border-blue-500/30';
      default: return 'bg-slate-500/20 text-slate-300 border-slate-500/30';
    }
  };

  if (wordBank.length === 0) return null;

  return (
    <>
      {/* Word Bank Widget */}
      <div className="bg-gradient-to-br from-purple-500/10 to-blue-500/10 backdrop-blur-sm border border-purple-500/20 rounded-xl p-6">
        <div className="flex items-center gap-3 mb-4">
          <div className="p-2 rounded-lg bg-purple-500/20 border border-purple-500/30">
            <BookOpen className="text-purple-300" size={20} />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-white tracking-tight">Security Glossary</h3>
            <p className="text-sm text-purple-300 font-light">Click any term to learn more</p>
          </div>
        </div>

        <div className="flex flex-wrap gap-2">
          {wordBank.map((term) => (
            <button
              key={term}
              onClick={() => fetchExplanation(term)}
              className="px-3 py-1.5 bg-white/5 border border-purple-500/30 text-purple-200 rounded-lg text-sm font-medium hover:bg-purple-500/20 hover:border-purple-400/50 hover:scale-105 transition-all duration-200 cursor-pointer"
            >
              {term}
            </button>
          ))}
        </div>
      </div>

      {/* Modal */}
      {selectedTerm && createPortal(
        <div className="fixed inset-0 top-0 left-0 right-0 bottom-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 animate-in fade-in duration-200" style={{ zIndex: 99999 }}>
          <div className="bg-slate-900 border-2 border-purple-500/30 rounded-2xl max-w-3xl w-full max-h-[90vh] overflow-hidden shadow-2xl shadow-purple-500/20 animate-in slide-in-from-bottom-4 duration-300 flex flex-col">
            {/* Header */}
            <div className="bg-slate-900 border-b border-purple-500/30 p-6 flex items-start justify-between gap-4 flex-shrink-0">
              <div className="flex items-center gap-3 flex-1 min-w-0">
                <div className="p-2 rounded-lg bg-purple-500/20 border border-purple-500/30 flex-shrink-0">
                  <Shield className="text-purple-300" size={24} />
                </div>
                <div className="flex-1 min-w-0">
                  <h2 className="text-2xl font-bold text-white tracking-tight truncate">{selectedTerm}</h2>
                  {explanation && (
                    <p className="text-sm text-purple-300 font-light truncate">{explanation.category}</p>
                  )}
                </div>
              </div>
              <button
                onClick={closeModal}
                className="p-2 rounded-lg bg-white/5 border border-white/10 text-slate-400 hover:bg-white/10 hover:text-white transition-all duration-200 flex-shrink-0"
              >
                <X size={20} />
              </button>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6 overflow-y-auto flex-1">
              {loading ? (
                <div className="flex flex-col items-center justify-center py-12">
                  <Loader2 className="animate-spin text-purple-400 mb-4" size={48} />
                  <p className="text-slate-300 font-light">Loading explanation...</p>
                </div>
              ) : explanation ? (
                <>
                  {/* Severity Badge */}
                  <div className="flex items-center gap-3">
                    <span className={`px-4 py-2 rounded-lg text-sm font-semibold border ${getSeverityColor(explanation.severity)}`}>
                      {explanation.severity} Severity
                    </span>
                  </div>

                  {/* Short Definition */}
                  <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                    <h3 className="text-sm font-semibold text-blue-300 mb-2 flex items-center gap-2">
                      <BookOpen size={16} />
                      Quick Definition
                    </h3>
                    <p className="text-white font-light leading-relaxed">{explanation.shortDefinition}</p>
                  </div>

                  {/* Technical Explanation */}
                  <div className="bg-white/5 border border-white/10 rounded-lg p-4">
                    <h3 className="text-sm font-semibold text-white mb-2">Technical Explanation</h3>
                    <p className="text-slate-300 font-light leading-relaxed">{explanation.technicalExplanation}</p>
                  </div>

                  {/* Example Attack */}
                  <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4">
                    <h3 className="text-sm font-semibold text-red-300 mb-2 flex items-center gap-2">
                      <AlertTriangle size={16} />
                      Example Attack Scenario
                    </h3>
                    <p className="text-red-200 font-light leading-relaxed italic">{explanation.exampleAttack}</p>
                  </div>

                  {/* Common Causes & Prevention */}
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="bg-white/5 border border-white/10 rounded-lg p-4">
                      <h3 className="text-sm font-semibold text-white mb-3">Common Causes</h3>
                      <ul className="space-y-2">
                        {explanation.commonCauses.map((cause, idx) => (
                          <li key={idx} className="text-sm text-slate-300 font-light flex items-start gap-2">
                            <span className="w-1.5 h-1.5 bg-red-400 rounded-full mt-2 flex-shrink-0"></span>
                            <span>{cause}</span>
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div className="bg-white/5 border border-white/10 rounded-lg p-4">
                      <h3 className="text-sm font-semibold text-white mb-3">Prevention</h3>
                      <ul className="space-y-2">
                        {explanation.prevention.map((prev, idx) => (
                          <li key={idx} className="text-sm text-slate-300 font-light flex items-start gap-2">
                            <span className="w-1.5 h-1.5 bg-green-400 rounded-full mt-2 flex-shrink-0"></span>
                            <span>{prev}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>

                  {/* Related Terms */}
                  {explanation.relatedTerms.length > 0 && (
                    <div className="bg-white/5 border border-white/10 rounded-lg p-4">
                      <h3 className="text-sm font-semibold text-white mb-3">Related Terms</h3>
                      <div className="flex flex-wrap gap-2">
                        {explanation.relatedTerms.map((related, idx) => (
                          <button
                            key={idx}
                            onClick={() => fetchExplanation(related)}
                            className="px-3 py-1.5 bg-purple-500/10 border border-purple-500/30 text-purple-300 rounded-lg text-xs font-medium hover:bg-purple-500/20 hover:scale-105 transition-all duration-200"
                          >
                            {related}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Learn More */}
                  <div className="bg-gradient-to-r from-purple-500/10 to-blue-500/10 border border-purple-500/30 rounded-lg p-4">
                    <a
                      href={explanation.learnMoreUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center justify-between gap-3 text-purple-300 hover:text-purple-200 transition-colors group"
                    >
                      <div>
                        <h3 className="text-sm font-semibold mb-1">Learn More</h3>
                        <p className="text-xs text-purple-400 font-light">Visit official documentation</p>
                      </div>
                      <ExternalLink size={20} className="group-hover:scale-110 transition-transform" />
                    </a>
                  </div>
                </>
              ) : null}
            </div>
          </div>
        </div>,
        document.body
      )}
    </>
  );
};
